//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-1899\UI\ElectrodeColor.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 1919
//              Date: 09-08-2020  (Format: mm-dd-yyyy)
//              Time: 18:40 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using Basic;
using MolexPlugin.Model;
using MolexPlugin.DAL;
using System.Collections.Generic;

namespace MolexPlugin
{

    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class ElectrodeColor
    {
        //class members
        private static Session theSession = null;
        private static UI theUI = null;
        private string theDlxFileName;
        private Part workPart;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group group0;// Block type: Group
        private NXOpen.BlockStyler.FaceCollector seleFace;// Block type: Face Collector
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.IntegerBlock ERNumX;// Block type: Integer
        private NXOpen.BlockStyler.IntegerBlock ERNumY;// Block type: Integer
        private NXOpen.BlockStyler.Group group1;// Block type: Group
        private NXOpen.BlockStyler.Button buttonNext;// Block type: Button
        private int number = 1;
        int num = 65;
        private ElectrodeInfo eleInfo;
        private List<ElectrodeColorInfo> colorList = new List<ElectrodeColorInfo>();
        public ElectrodeColor()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = UI.GetUI();
                workPart = theSession.Parts.Work;
                theDlxFileName = "ElectrodeColor.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }
        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                if (!ElectrodeModel.IsElectrode(workPart))
                {
                    theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "请设置电极为显示部件");
                }
                theDialog.Show();
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
                seleFace = (NXOpen.BlockStyler.FaceCollector)theDialog.TopBlock.FindBlock("seleFace");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                ERNumX = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("ERNumX");
                ERNumY = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("ERNumY");
                group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
                buttonNext = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("buttonNext");
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                this.colorList = new ElectrodeColorList().GetAllColorInfo();
                eleInfo = ElectrodeInfo.GetAttribute(workPart);
                this.buttonNext.Enable = false;
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: apply_cb
        //------------------------------------------------------------------------------
        public int apply_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----
                List<Face> faces = new List<Face>();
                foreach (TaggedObject tj in seleFace.GetSelectedObjects())
                {
                    faces.Add(tj as Face);
                }
                SetColor(faces, ref num);
                eleInfo.AllInfo.GapValue.ERNum[0] = ERNumX.Value;
                eleInfo.AllInfo.GapValue.ERNum[0] = ERNumY.Value;
                eleInfo.AllInfo.GapValue.SetAttribute(workPart);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {

                if (block == seleFace)
                {
                    //---------Enter your code here-----------
                    if (seleFace.GetSelectedObjects().Length > 0)
                    {
                        this.buttonNext.Enable = true;
                    }
                }
                else if (block == ERNumX)
                {
                    //---------Enter your code here-----------
                    if (ERNumX.Value > eleInfo.AllInfo.Pitch.PitchXNum)
                        theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "输入值错误！");
                }
                else if (block == ERNumY)
                {
                    //---------Enter your code here-----------
                    if (ERNumY.Value > eleInfo.AllInfo.Pitch.PitchYNum)
                        theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "输入值错误！");
                }
                else if (block == buttonNext)
                {
                    //---------Enter your code here-----------
                    this.ERNumX.Enable = false;
                    this.ERNumY.Enable = false;
                    List<Face> faces = new List<Face>();
                    foreach (TaggedObject tj in seleFace.GetSelectedObjects())
                    {
                        faces.Add(tj as Face);
                    }
                    SetColor(faces, ref num);
                    TaggedObject[] obs = { };
                    seleFace.SetSelectedObjects(obs);
                    this.buttonNext.Enable = false;
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                errorCode = apply_cb();
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }

        private void SetColor(List<Face> faces, ref int num)
        {

            if (ERNumX.Value == 0 && ERNumY.Value == 0)
            {

                char temp = (char)num;
                colorList[number - 1].ToolhName = temp.ToString();
                colorList[number - 1].GapValue = "EF";
                colorList[number - 1].SetAttribute(faces.ToArray());
                foreach (Face fe in faces)
                {
                    fe.Color = colorList[number - 1].ColorId;
                }
                num++;
            }
            else
            {
                colorList[number - 1].SetAttribute(faces.ToArray());
                char temp = (char)num;
                colorList[number - 1].ToolhName = temp.ToString();
                foreach (Face fe in faces)
                {
                    fe.Color = colorList[number - 1].ColorId;
                }
                if (number % 2 != 0)
                {
                    colorList[number - 1].GapValue = "ER";
                }
                else
                {
                    colorList[number - 1].GapValue = "EF";
                    num++;
                }
                colorList[number - 1].SetAttribute(faces.ToArray());
            }
            number++;
        }

    }
}
