//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-12.0\UI\AddWork.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 11
//              Date: 02-26-2020  (Format: mm-dd-yyyy)
//              Time: 16:26 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Utilities;
using MolexPlugin.DAL;
using NXOpen.UF;
using Basic;
using MolexPlugin.Model;
using System.IO;

namespace MolexPlugin
{
    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public partial class AddWork
    {
        //class members
        private static Session theSession = null;
        private static NXOpen.UI theUI = null;
        private string theDlxFileName;
        private Part workPart;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group groupPart;// Block type: Group
        private NXOpen.BlockStyler.SelectObject selePart;// Block type: Selection
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.Toggle addOrModify;// Block type: Toggle
        private NXOpen.BlockStyler.Enumeration workNumber;// Block type: Enumeration
        private NXOpen.BlockStyler.Group group2;// Block type: Group
        private NXOpen.BlockStyler.SelectObject selePoint;// Block type: Selection
        private NXOpen.BlockStyler.Group group1;// Block type: Group
        private NXOpen.BlockStyler.Button button_X;// Block type: Button
        private NXOpen.BlockStyler.Button button_Z;// Block type: Button
        private NXOpen.BlockStyler.Button button_Y;// Block type: Button

        private NXOpen.Assemblies.Component seleCt;
        private ASMModel asmModel = null;
        private Part selectPart = null;
        private ASMCollection asmColl = null;
        private NXObjectAooearancePoint aoo = null;
        private List<NXObject> points = new List<NXObject>();
        private Point selectPt = null;
        private Face selectFace = null;
        private UserSingleton user = UserSingleton.Instance();
        //------------------------------------------------------------------------------
        //Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public AddWork()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = NXOpen.UI.GetUI();
                workPart = theSession.Parts.Work;
                theDlxFileName = "AddWork.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }


        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                if (user.UserSucceed && user.Jurisd.GetElectrodeJurisd())
                {
                    if (ASMModel.IsAsm(workPart))
                    {
                        asmModel = new ASMModel(workPart);
                    }
                    else
                    {
                        asmModel = ASMCollection.GetAsmModel(workPart);
                        if (asmModel != null)
                        {
                            PartUtils.SetPartDisplay(asmModel.PartTag);
                            workPart = asmModel.PartTag;
                        }
                        else
                        {
                            theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "无法找到ASM部件!");
                            return 0;
                        }
                    }
                    asmColl = new ASMCollection(asmModel);
                    theDialog.Show();
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                groupPart = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("groupPart");
                selePart = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selePart");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                addOrModify = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("addOrModify");
                workNumber = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("workNumber");
                group2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group2");
                selePoint = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selePoint");
                group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
                button_X = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_X");
                button_Z = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_Z");
                button_Y = (NXOpen.BlockStyler.Button)theDialog.TopBlock.FindBlock("button_Y");
                addOrModify = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("addOrModify");
                workNumber = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("workNumber");

                #region 过滤
                Selection.MaskTriple maskComp = new Selection.MaskTriple()
                {
                    Type = 63,
                    Subtype = 1,
                    SolidBodySubtype = 0
                };
                Selection.MaskTriple[] masks = { maskComp };
                selePart.SetSelectionFilter(Selection.SelectionAction.ClearAndEnableSpecific, masks);//过滤只选择组件

                Selection.MaskTriple maskFace = new Selection.MaskTriple()
                {
                    Type = 70,
                    Subtype = 2,
                    SolidBodySubtype = 20
                };
                Selection.MaskTriple maskPoint = new Selection.MaskTriple()
                {
                    Type = 2,
                    Subtype = 0,
                    SolidBodySubtype = 0
                };

                Selection.MaskTriple[] masks1 = { maskFace, maskPoint };
                selePoint.SetSelectionFilter(Selection.SelectionAction.ClearAndEnableSpecific, masks1);//过滤只选择点和面
                #endregion
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
                // this.group.Show = false;
                this.group.Show = false;
                this.selePoint.Enable = false;
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: apply_cb
        //------------------------------------------------------------------------------
        public int apply_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----

                if (this.selectPart != null)
                {
                    CoordinateSystem wcs = workPart.WCS.CoordinateSystem;
                    Matrix4 matr = new Matrix4();
                    matr.Identity();
                    Part temp = this.seleCt.Prototype as Part;
                    List<string> err = new List<string>();
                    if (WorkModel.IsWork(temp))
                    {
                        WorkModel wm = new WorkModel(temp);
                        if (!this.addOrModify.Value)
                        {
                            matr.TransformToCsys(wcs, ref matr);
                            if (!this.AlterWork(wm, matr))
                                theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "修改设定坐标错误！");
                        }
                        else
                        {
                            AddWorkBuilder add = new AddWorkBuilder(asmModel, this.seleCt);
                            string workpieceName = this.GetWorkpieceNumber(this.workNumber.ValueAsString, wm);
                            if (wm.Info.MoldInfo.WorkpieceNumber.Equals(workpieceName, StringComparison.CurrentCultureIgnoreCase))
                            {
                                err.AddRange(add.CopWork(user.CreatorUser));
                            }
                            else
                            {
                                err.AddRange(add.CopOtherWork(user.CreatorUser, this.workNumber.ValueAsString));
                            }

                        }
                    }
                    else
                    {
                        if (!this.addOrModify.Value)
                        {
                            matr.TransformToCsys(wcs, ref matr);
                        }
                        else
                        {
                            matr = GetParentWorkMatr(seleCt);
                        }
                       
                        AddWorkBuilder add = new AddWorkBuilder(asmModel, this.seleCt.Parent.Parent);
                        err.AddRange(add.CreateWork(user.CreatorUser, this.seleCt, matr));
                    }
                    if (err.Count > 0)
                        ClassItem.Print(err.ToArray());
                    if (points.Count != 0)
                        DeleteObject.Delete(this.points.ToArray());
                    CsysUtils.SetWcsToAbs();
                    bool anyPartsModified1;
                    NXOpen.PartSaveStatus partSaveStatus1;
                    Session.GetSession().Parts.SaveAll(out anyPartsModified1, out partSaveStatus1);
                }


            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {
                if (block == selePart)
                {
                    //---------Enter your code here-----------
                    TaggedObject[] obj = this.selePart.GetLastSelectedObjects();
                    if (obj.Length > 0)
                    {
                        this.seleCt = obj[0] as NXOpen.Assemblies.Component;

                        Part temp = (this.seleCt).Prototype as Part;
                        if (ParentAssmblieInfo.IsWork(temp))
                        {
                            WorkModel wk = new WorkModel(temp);
                            this.group.Show = true;
                            this.workNumber.SetEnumMembers(GetWorkpieceName(wk).ToArray());
                            selectPart = GetWorkPieceForWork(wk);
                        }
                        else
                        {
                            selectPart = temp;
                            this.group.Show = false;
                            this.group1.Show = true;
                            this.group2.Show = true;
                        }
                        List<Body> bodys = GetCompBodys(this.seleCt, selectPart);
                        if (bodys.Count > 0)
                        {
                            aoo = new NXObjectAooearancePoint(bodys.ToArray());
                            this.points = aoo.CreatePoint();
                        }
                        this.selePoint.Enable = true;
                    }
                    else
                    {
                        this.selePoint.Enable = false;
                        selectPart = null;
                        this.seleCt = null;
                        DeleteObject.Delete(this.points.ToArray());
                        this.points.Clear();
                        this.selectPt = null;
                        this.selectFace = null;
                        CsysUtils.SetWcsToAbs();
                    }
                }
                else if (block == addOrModify)
                {
                    //---------Enter your code here-----------
                    if (this.addOrModify.Value)
                    {
                        this.workNumber.Show = true;
                        if (this.points.Count > 0)
                        {
                            DeleteObject.Delete(this.points.ToArray());
                            this.points.Clear();
                        }

                        this.group2.Show = false;
                        this.group1.Show = false;
                    }
                    else
                    {
                        if (selectPart != null)
                        {
                            List<Body> bodys = GetCompBodys(this.seleCt, this.selectPart);
                            if (bodys.Count > 0)
                            {
                                aoo = new NXObjectAooearancePoint(bodys.ToArray());
                                this.points = aoo.CreatePoint();
                            }
                        }
                        //  this.workNumber.Show = false;
                        this.group1.Show = true;
                        this.group2.Show = true;

                    }


                }
                else if (block == workNumber)
                {
                    //---------Enter your code here-----------
                }
                else if (block == selePoint)
                {
                    //---------Enter your code here-----------
                    if (selePoint.GetSelectedObjects().Length != 0)
                    {
                        TaggedObject obj = selePoint.GetSelectedObjects()[0];
                        //---------Enter your code here-----------
                        if (obj is Point)
                            this.selectPt = obj as Point;
                        if (obj is Face)
                        {
                            Face temp = obj as Face;
                            if (this.selectFace != null)
                            {
                                this.selectFace.Unhighlight();
                                if (this.selectFace.Equals(temp))
                                    this.selectFace = null;
                                else
                                    this.selectFace = temp;
                            }
                            else
                                this.selectFace = temp;
                            if (this.selectFace != null)
                                this.selectFace.Highlight();
                        }
                        if (selectPt != null)
                        {
                            Point3d temp;
                            if (selectFace != null)
                                temp = NXObjectAooearancePoint.GetPointToFaceDis(selectPt, selectFace);
                            else
                                temp = selectPt.Coordinates;
                            CsysUtils.SetWcsOfCentePoint(temp);
                        }
                    }
                }
                else if (block == button_X)
                {
                    //---------Enter your code here-----------
                    CsysUtils.RotateWcs(WCS.Axis.XAxis, 90);
                }
                else if (block == button_Y)
                {
                    //---------Enter your code here-----------
                    CsysUtils.RotateWcs(WCS.Axis.YAxis, 90);
                }
                else if (block == button_Z)
                {
                    //---------Enter your code here-----------
                    CsysUtils.RotateWcs(WCS.Axis.ZAxis, 90);
                }

            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                errorCode = apply_cb();
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: filter_cb
        //------------------------------------------------------------------------------
        public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
        {
            TaggedObject[] obj = this.selePart.GetSelectedObjects();
            if (selectedObject is NXOpen.Assemblies.Component)
            {
                Part part = (selectedObject as NXOpen.Assemblies.Component).Prototype as Part;
                ParentAssmblieInfo info = ParentAssmblieInfo.GetAttribute(part);
                if (info.Type == PartType.Workpiece || info.Type == PartType.Work)
                    return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
            }
            if (obj.Length > 0)
            {
              //  Part part = (obj[0] as NXOpen.Assemblies.Component).Prototype as Part;
                if (selectedObject is Face)
                {
                    Face seleFace = selectedObject as Face;
                    Part selePart = (seleFace.Prototype as Face).OwningPart as Part;
                    if (selePart.Tag == this.selectPart.Tag)
                        return UFConstants.UF_UI_SEL_ACCEPT;
                }
                else if(selectedObject is Point)
                {
                    return UFConstants.UF_UI_SEL_ACCEPT;
                }
            }
            return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
        }

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }

    }
}
