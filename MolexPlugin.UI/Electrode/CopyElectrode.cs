//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-1899\UI\CopyElectrode.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 1919
//              Date: 10-23-2020  (Format: mm-dd-yyyy)
//              Time: 15:59 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Utilities;
using MolexPlugin.DAL;
using NXOpen.UF;
using Basic;
using MolexPlugin.Model;
using System.IO;

namespace MolexPlugin
{
    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class CopyElectrode
    {
        //class members
        private static Session theSession = null;
        private static NXOpen.UI theUI = null;
        private Part workPart = null;
        private string theDlxFileName;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group group0;// Block type: Group
        private NXOpen.BlockStyler.SelectObject seleWork;// Block type: Selection
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.Enumeration eumWorkName;// Block type: Enumeration
        private UserSingleton user = UserSingleton.Instance();
        private ASMModel asmModel = null;
        private ASMCollection asmColl = null;
        public CopyElectrode()
        {
            try
            {
                theSession = Session.GetSession();
                workPart = theSession.Parts.Work;
                theUI = NXOpen.UI.GetUI();
                theDlxFileName = "CopyElectrode.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddFilterHandler(new NXOpen.BlockStyler.BlockDialog.Filter(filter_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }


        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                if (user.UserSucceed && user.Jurisd.GetElectrodeJurisd())
                {
                    if (ASMModel.IsAsm(workPart))
                    {
                        asmModel = new ASMModel(workPart);
                    }
                    else
                    {
                        asmModel = ASMCollection.GetAsmModel(workPart);
                        if (asmModel != null)
                        {
                            PartUtils.SetPartDisplay(asmModel.PartTag);
                            workPart = asmModel.PartTag;
                        }
                        else
                        {
                            theUI.NXMessageBox.Show("错误", NXMessageBox.DialogType.Error, "无法找到ASM部件!");
                            return 0;
                        }
                    }
                    asmColl = new ASMCollection(asmModel);
                    theDialog.Show();
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
                seleWork = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("seleWork");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                eumWorkName = (NXOpen.BlockStyler.Enumeration)theDialog.TopBlock.FindBlock("eumWorkName");
                Selection.MaskTriple maskComp = new Selection.MaskTriple()
                {
                    Type = 63,
                    Subtype = 1,
                    SolidBodySubtype = 0
                };
                Selection.MaskTriple[] masks = { maskComp };
                seleWork.SetSelectionFilter(Selection.SelectionAction.ClearAndEnableSpecific, masks);//过滤只选择组件
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
                group.Show = false;
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: apply_cb
        //------------------------------------------------------------------------------
        public int apply_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----
                NXOpen.Assemblies.Component seleCt = this.seleWork.GetSelectedObjects()[0] as NXOpen.Assemblies.Component;
                if (seleCt != null)
                {
                    Session.UndoMarkId markId;
                    markId = Session.GetSession().SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "复制电极");
                    List<string> err = new List<string>();
                    AddWorkBuilder add = new AddWorkBuilder(asmModel, seleCt);
                    Part pt = GetWorkForName(this.eumWorkName.ValueAsString);
                    if (pt != null)
                        err.AddRange(add.CopyElectrodeToWork(pt));
                    else
                    {
                        err.Add("无法找到WORK！");
                    }
                    if (err.Count > 0)
                        ClassItem.Print(err.ToArray());
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {
                if (block == seleWork)
                {
                    //---------Enter your code here-----------
                    if (this.seleWork.GetSelectedObjects().Length > 0)
                    {
                        NXOpen.Assemblies.Component seleCt = this.seleWork.GetSelectedObjects()[0] as NXOpen.Assemblies.Component;
                        group.Show = true;
                        this.eumWorkName.SetEnumMembers(GetWorkName(seleCt).ToArray());
                    }
                    else
                        group.Show = false;
                }
                else if (block == eumWorkName)
                {
                    //---------Enter your code here-----------
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                errorCode = apply_cb();
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }
        public int filter_cb(NXOpen.BlockStyler.UIBlock block, NXOpen.TaggedObject selectedObject)
        {
            if (selectedObject is NXOpen.Assemblies.Component)
            {
                if (ParentAssmblieInfo.IsWork(selectedObject as NXOpen.Assemblies.Component))
                    return (NXOpen.UF.UFConstants.UF_UI_SEL_ACCEPT);
            }
            return (NXOpen.UF.UFConstants.UF_UI_SEL_REJECT);
        }
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }
        /// <summary>
        /// 获取工件名
        /// </summary>
        /// <param name="seleCt"></param>
        /// <returns></returns>
        private List<string> GetWorkName(NXOpen.Assemblies.Component seleCt)
        {
            List<string> workName = new List<string>();
            foreach (WorkModel wm in asmColl.GetWorks())
            {
                if (!wm.AssembleName.Equals(seleCt.Name, StringComparison.CurrentCultureIgnoreCase))
                {
                    workName.Add(wm.AssembleName);
                }
            }
            return workName;
        }
        /// <summary>
        /// 通过名字获取work
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        private Part GetWorkForName(string name)
        {
            foreach (WorkModel wm in asmColl.GetWorks())
            {
                if (wm.AssembleName.Equals(name, StringComparison.CurrentCultureIgnoreCase))
                {
                    return wm.PartTag;
                }
            }
            return null;
        }

    }
}
