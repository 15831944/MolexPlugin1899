//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\ycchen10\OneDrive - kochind.com\Desktop\MolexPlugIn-1899\UI\AnalyzeBodyAndFace.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: ycchen10
//              Version: NX 1907
//              Date: 06-14-2020  (Format: mm-dd-yyyy)
//              Time: 09:17 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NXOpen;
using NXOpen.UF;
using NXOpen.BlockStyler;
using MolexPlugin.DAL;
namespace MolexPlugin
{
    //------------------------------------------------------------------------------
    //Represents Block Styler application class
    //------------------------------------------------------------------------------
    public class AnalyzeBodyAndFace
    {
        //class members
        private static Session theSession = null;
        private static NXOpen.UI theUI = null;
        private string theDlxFileName;
        private NXOpen.BlockStyler.BlockDialog theDialog;
        private NXOpen.BlockStyler.Group group0;// Block type: Group
        private NXOpen.BlockStyler.Group group;// Block type: Group
        private NXOpen.BlockStyler.SelectObject selectiObj;// Block type: Selection
        private NXOpen.BlockStyler.Group group1;// Block type: Group
        private NXOpen.BlockStyler.SpecifyVector vector;// Block type: Specify Vector
        private NXOpen.BlockStyler.Group group3;// Block type: Group
        private NXOpen.BlockStyler.Label label01;// Block type: Label
        private NXOpen.BlockStyler.Label labelFace;// Block type: Label
        private NXOpen.BlockStyler.Label label011;// Block type: Label
        private NXOpen.BlockStyler.Label labelDia;// Block type: Label
        private NXOpen.BlockStyler.Group group2;// Block type: Group
        private NXOpen.BlockStyler.Toggle color;// Block type: Toggle
        private List<Face> faces = new List<Face>();
        private List<Body> bodys = new List<Body>();
        //------------------------------------------------------------------------------
        //Bit Option for Property: SnapPointTypesEnabled
        //------------------------------------------------------------------------------
        public static readonly int SnapPointTypesEnabled_UserDefined = (1 << 0);
        public static readonly int SnapPointTypesEnabled_Inferred = (1 << 1);
        public static readonly int SnapPointTypesEnabled_ScreenPosition = (1 << 2);
        public static readonly int SnapPointTypesEnabled_EndPoint = (1 << 3);
        public static readonly int SnapPointTypesEnabled_MidPoint = (1 << 4);
        public static readonly int SnapPointTypesEnabled_ControlPoint = (1 << 5);
        public static readonly int SnapPointTypesEnabled_Intersection = (1 << 6);
        public static readonly int SnapPointTypesEnabled_ArcCenter = (1 << 7);
        public static readonly int SnapPointTypesEnabled_QuadrantPoint = (1 << 8);
        public static readonly int SnapPointTypesEnabled_ExistingPoint = (1 << 9);
        public static readonly int SnapPointTypesEnabled_PointonCurve = (1 << 10);
        public static readonly int SnapPointTypesEnabled_PointonSurface = (1 << 11);
        public static readonly int SnapPointTypesEnabled_PointConstructor = (1 << 12);
        public static readonly int SnapPointTypesEnabled_TwocurveIntersection = (1 << 13);
        public static readonly int SnapPointTypesEnabled_TangentPoint = (1 << 14);
        public static readonly int SnapPointTypesEnabled_Poles = (1 << 15);
        public static readonly int SnapPointTypesEnabled_BoundedGridPoint = (1 << 16);
        public static readonly int SnapPointTypesEnabled_FacetVertexPoint = (1 << 17);
        public static readonly int SnapPointTypesEnabled_DefiningPoint = (1 << 18);
        //------------------------------------------------------------------------------
        //Bit Option for Property: SnapPointTypesOnByDefault
        //------------------------------------------------------------------------------
        public static readonly int SnapPointTypesOnByDefault_EndPoint = (1 << 3);
        public static readonly int SnapPointTypesOnByDefault_MidPoint = (1 << 4);
        public static readonly int SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
        public static readonly int SnapPointTypesOnByDefault_Intersection = (1 << 6);
        public static readonly int SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
        public static readonly int SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
        public static readonly int SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
        public static readonly int SnapPointTypesOnByDefault_PointonCurve = (1 << 10);
        public static readonly int SnapPointTypesOnByDefault_PointonSurface = (1 << 11);
        public static readonly int SnapPointTypesOnByDefault_PointConstructor = (1 << 12);
        public static readonly int SnapPointTypesOnByDefault_BoundedGridPoint = (1 << 16);
        //------------------------------------------------------------------------------
        //Bit Option for Property: SnapPointTypesOnByDefault
        //------------------------------------------------------------------------------
        public static readonly int SnapPointTypesOnByDefault_UserDefined = (1 << 0);
        public static readonly int SnapPointTypesOnByDefault_Inferred = (1 << 1);
        public static readonly int SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
        public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 << 13);
        public static readonly int SnapPointTypesOnByDefault_TangentPoint = (1 << 14);
        public static readonly int SnapPointTypesOnByDefault_Poles = (1 << 15);
        public static readonly int SnapPointTypesOnByDefault_FacetVertexPoint = (1 << 17);
        public static readonly int SnapPointTypesOnByDefault_DefiningPoint = (1 << 18);

        //------------------------------------------------------------------------------
        //Constructor for NX Styler class
        //------------------------------------------------------------------------------
        public AnalyzeBodyAndFace()
        {
            try
            {
                theSession = Session.GetSession();
                theUI = NXOpen.UI.GetUI();
                theDlxFileName = "AnalyzeBodyAndFace.dlx";
                theDialog = theUI.CreateDialog(theDlxFileName);
                theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
                theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
                theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
                theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
                theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                throw ex;
            }
        }

        //------------------------------------------------------------------------------
        //This method shows the dialog on the screen
        //------------------------------------------------------------------------------
        public NXOpen.UIStyler.DialogResponse Show()
        {
            try
            {
                UserSingleton user = UserSingleton.Instance();
                if (user.UserSucceed && user.Jurisd.GetComm())
                {
                    theDialog.Show();
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Method Name: Dispose
        //------------------------------------------------------------------------------
        public void Dispose()
        {
            if (theDialog != null)
            {
                theDialog.Dispose();
                theDialog = null;
            }
        }

        //------------------------------------------------------------------------------
        //---------------------Block UI Styler Callback Functions--------------------------
        //------------------------------------------------------------------------------

        //------------------------------------------------------------------------------
        //Callback Name: initialize_cb
        //------------------------------------------------------------------------------
        public void initialize_cb()
        {
            try
            {
                group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
                group = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group");
                selectiObj = (NXOpen.BlockStyler.SelectObject)theDialog.TopBlock.FindBlock("selectiObj");
                group1 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group1");
                vector = (NXOpen.BlockStyler.SpecifyVector)theDialog.TopBlock.FindBlock("vector");
                group3 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group3");
                label01 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("label01");
                labelFace = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("labelFace");
                label011 = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("label011");
                labelDia = (NXOpen.BlockStyler.Label)theDialog.TopBlock.FindBlock("labelDia");
                group2 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group2");
                color = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("color");

                Selection.MaskTriple maskFace = new Selection.MaskTriple() //面
                {
                    Type = 70,
                    Subtype = 2,
                    SolidBodySubtype = UFConstants.UF_UI_SEL_FEATURE_ANY_FACE
                };
                Selection.MaskTriple maskBody = new Selection.MaskTriple() //面
                {
                    Type = 70,
                    Subtype = 0,
                    SolidBodySubtype = UFConstants.UF_UI_SEL_FEATURE_BODY
                };
                Selection.MaskTriple[] masks = { maskFace, maskBody };
                this.selectiObj.SetSelectionFilter(Selection.SelectionAction.ClearAndEnableSpecific, masks);//过滤只选择体和面
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: dialogShown_cb
        //This callback is executed just before the dialog launch. Thus any value set 
        //here will take precedence and dialog will be launched showing that value. 
        //------------------------------------------------------------------------------
        public void dialogShown_cb()
        {
            try
            {
                //---- Enter your callback code here -----
                vector.Vector = new Vector3d(0, 0, 1);
                labelDia.Label = "";
                labelFace.Label = "";
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
        }

        //------------------------------------------------------------------------------
        //Callback Name: apply_cb
        //------------------------------------------------------------------------------
        public int apply_cb()
        {
            int errorCode = 0;
            try
            {
                //---- Enter your callback code here -----
                Part workPart = theSession.Parts.Work;
                if (this.bodys.Count > 0)
                {
                    double min = 9999;
                    bool backOff = true;
                    foreach (Body by in bodys)
                    {
                        AnalysisBodySlopeAndMinDia ana = new AnalysisBodySlopeAndMinDia(this.vector.Vector, by);
                        if (ana.AskBackOffFace())
                            backOff = false;
                        if (min >= ana.MinDia)
                            min = ana.MinDia;
                        if (color.Value)
                            ana.SetColour();
                    }
                    if (min != 9999)
                    {
                        Basic.ClassItem.Print("最小内R角          " + (min / 2).ToString("f3"));
                    }
                    if (!backOff)
                        theUI.NXMessageBox.Show("提示！", NXMessageBox.DialogType.Warning, "有倒扣面");
                    workPart.ModelingViews.WorkView.Regenerate();
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Callback Name: update_cb
        //------------------------------------------------------------------------------
        public int update_cb(NXOpen.BlockStyler.UIBlock block)
        {
            try
            {
                if (block == selectiObj)
                {
                    //---------Enter your code here-----------
                    faces.Clear();
                    GetSeleObjs();
                    // Vector3d vec = vector.Vector;
                    if (bodys.Count == 0 && faces.Count >= 1)
                    {
                        AnalysisFaceSlopeAndDia an = new AnalysisFaceSlopeAndDia(faces[faces.Count - 1], vector.Vector);
                        if (an.Data.IntNorm == -1)
                        {
                            labelDia.Label = (an.MinDia / 2).ToString("f3");
                        }
                        AbstractFaceSlopeColour cu = FaceSlopeColourBuilder.Build(an);
                        cu.FaceColour();
                        labelFace.Label = cu.GetFaceType();
                    }
                }
                else if (block == vector)
                {
                    //---------Enter your code here-----------
                    if (bodys.Count == 0 && faces.Count >= 1)
                    {
                        AnalysisFaceSlopeAndDia an = new AnalysisFaceSlopeAndDia(faces[faces.Count - 1], vector.Vector);
                        if (an.Data.IntNorm == -1)
                        {
                            labelDia.Label = (an.MinDia / 2).ToString("f3");
                        }
                        AbstractFaceSlopeColour cu = FaceSlopeColourBuilder.Build(an);
                        labelFace.Label = cu.GetFaceType();
                    }
                }
                else if (block == label01)
                {
                    //---------Enter your code here-----------
                }
                else if (block == labelFace)
                {
                    //---------Enter your code here-----------
                }
                else if (block == label011)
                {
                    //---------Enter your code here-----------
                }
                else if (block == labelDia)
                {
                    //---------Enter your code here-----------
                }
                else if (block == color)
                {
                    //---------Enter your code here-----------
                }
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return 0;
        }

        //------------------------------------------------------------------------------
        //Callback Name: ok_cb
        //------------------------------------------------------------------------------
        public int ok_cb()
        {
            int errorCode = 0;
            try
            {
                errorCode = apply_cb();
                //---- Enter your callback code here -----
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                errorCode = 1;
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return errorCode;
        }

        //------------------------------------------------------------------------------
        //Function Name: GetBlockProperties
        //Returns the propertylist of the specified BlockID
        //------------------------------------------------------------------------------
        public PropertyList GetBlockProperties(string blockID)
        {
            PropertyList plist = null;
            try
            {
                plist = theDialog.GetBlockProperties(blockID);
            }
            catch (Exception ex)
            {
                //---- Enter your exception handling code here -----
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
            }
            return plist;
        }

        private void GetSeleObjs()
        {
            foreach (TaggedObject tag in selectiObj.GetSelectedObjects())
            {
                if (tag is Body)
                {
                    bodys.Add(tag as Body);
                }
                if (tag is Face)
                {
                    faces.Add(tag as Face);
                }
            }
            if (faces.Count > 0)
            {
                for (int i = faces.Count - 1; i >= 0; i--)
                {
                    Body by = faces[i].GetBody();
                    if (bodys.Exists(a => a.Equals(by)))
                    {
                        faces.Remove(faces[i]);
                    }
                }
            }
        }

    }
}
